{"version":3,"file":"static/js/852.57a5adb7.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPF,EAAAA,EAAAA,IAAA,qCAAwCC,IADjC,cACxBE,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,qDAKtB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBN,EAAAA,EAAAA,IAAA,4DACgCC,EADhC,iCACgEK,EADhE,gCADlB,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAiCP,IAFrD,cAEGE,EAFH,yBAGIA,GAHJ,gCAKHM,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,gGAEoBR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,YAErB,CACEI,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAPb,cAEGX,EAFH,yBAWIA,EAASC,MAXb,gCAaHK,QAAQC,MAAR,MAbG,gFAiBA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BP,GAA/B,gGAEoBR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,YACE,CACrBI,OAAQ,CACNC,QAASZ,EACTa,SAAU,WANb,cAEGX,EAFH,yBAUIA,EAASC,KAAKY,SAVlB,gCAaHP,QAAQC,MAAR,MAbG,gF,oJCzCMO,EAAWC,EAAAA,EAAAA,GAAH,kLAURC,EAAeD,EAAAA,EAAAA,GAAH,4LAUZE,EAAWF,EAAAA,EAAAA,GAAH,uFAKRG,EAAWH,EAAAA,EAAAA,EAAH,iE,oCCnBRI,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQnB,GAAOoB,EAAAA,EAAAA,MAAPpB,GAgBR,OAdAqB,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAiCrB,GAAjC,iGAE2BG,EAAAA,EAAAA,IAAgBH,GAF3C,OAEUL,EAFV,OAGIsB,EAAQtB,EAASqB,MAHrB,gDAKIf,QAAQC,MAAR,MALJ,yBAOIiB,GAAW,GAPf,4EADc,yBAAC,SAAD,2BAWdG,CAAkBtB,EACnB,GAAE,CAACA,KAGF,gCACGkB,IAAW,SAACK,EAAA,EAAD,KACZ,SAACd,EAAD,UACGO,EAAKQ,KAAI,SAAAC,GAAK,OACb,UAACd,EAAD,YACE,gBACEe,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAKJ,EAAMK,KACXC,MAAO,IACPC,OAAQ,OAEV,SAACpB,EAAD,UAAWa,EAAMK,QACjB,SAACjB,EAAD,UAAWY,EAAMQ,cCzBT,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtC,EAAIuC,GAWvD,OAREvC,IAFFuC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDaSG,GADN,QAmBtB,C","sources":["components/API/MovieAPI.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\nexport const getPopularMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport async function getMovieByName(query) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  try {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCredits(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/credits`,\n      {\n        params: {\n          api_key: 'f983fc840eb543faba07dcbe6db19b0b',\n          language: 'en-US',\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/reviews`, {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n    return response.data.results;\n\n  } catch (error) {\n    console.error(error);\n  }\n}","import styled from '@emotion/styled'\n\nexport const CastList = styled.ul`\n    list-style: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 15px;\n    padding: 0;\n`\n\nexport const CastListItem = styled.li`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 150px;\n    height: 100%;\n    gap: 4px;\n    \n`\nexport const CastName = styled.h2`\n    font-size: 16px;\n    margin: 0;\n    text-align: center;\n`\nexport const CastRole = styled.p`\n   margin: 0;  \n   text-align: center;\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { CastList, CastListItem, CastName, CastRole } from './Cast.styled';\nimport defaultCast from '../../images/defaultCast.png';\nimport { Loader } from '../Loader/Loader';\nimport { getMovieCredits } from '../API/MovieAPI';\n\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieCredits(id) {\n      try {\n        const response = await getMovieCredits(id);\n        setCast(response.cast);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMovieCredits(id);\n  }, [id]);\n\n  return (\n    <>\n      {loading && <Loader></Loader>}\n      <CastList>\n        {cast.map(actor => (\n          <CastListItem key={nanoid()}>\n            <img\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                  : defaultCast\n              }\n              alt={actor.name}\n              width={120}\n              height={180}\n            />\n            <CastName>{actor.name}</CastName>\n            <CastRole>{actor.character}</CastRole>\n          </CastListItem>\n        ))}\n      </CastList>\n    </>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["axios","API_KEY","getPopularMovies","response","data","getMovieByName","query","getMovieDetails","id","console","error","getMovieCredits","params","api_key","language","getMovieReviews","results","CastList","styled","CastListItem","CastName","CastRole","Cast","useState","cast","setCast","loading","setLoading","useParams","useEffect","fetchMovieCredits","Loader","map","actor","src","profile_path","defaultCast","alt","name","width","height","character","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}